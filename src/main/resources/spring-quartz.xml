<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	">
	<!-- Quartz管理类 -->
	<bean id="quartzManager" class="cn.cjp.quartz.manager.QuartzManager">
		<property name="scheduler" ref="springJobSchedulerFactoryBean"></property>
	</bean>

	<!-- 使用MethodInvokingJobDetailFactoryBean，任务类可以不实现Job接口，通过targetMethod指定调用方法，但会报不能序列化异常 -->
	<bean id="simpleJobDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="name" value="exampleJob"></property>
		<property name="jobClass" value="cn.cjp.quartz.job.SimpleJob"></property>
		<property name="jobDataAsMap">
			<map>
				<entry key="service">
					<value>simple is the beat</value>
				</entry>
			</map>
		</property>
	</bean>

	<!-- ======================== 调度触发器 ======================== -->
	<bean id="cronTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="simpleJobDetail"></property>
		<property name="cronExpression" value="0/5 * * * * ?"></property>
	</bean>

	<!-- ======================== 调度工厂 ======================== -->
	<bean id="springJobSchedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="quartzDataSource"></property>
		<!-- 自启动 -->
		<property name="autoStartup" value="true"></property>
		<property name="configLocation" value="classpath:./quartz.properties"></property>
		<property name="triggers">
			<list>
				<ref bean="cronTriggerBean" />
			</list>
		</property>
	</bean>

	<!-- mysql,redis 连接配置 -->
	<bean id="mysqlProperties"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:./mysql.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- 数据源的配置 begin -->
	<bean id="quartzDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 , 关闭30分钟内没有使用的连接 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />
		<property name="url" value="${mysql.url}"></property>
		<property name="username" value="${mysql.user}"></property>
		<property name="password" value="${mysql.password}"></property>
		<!-- 保存 -->
		<property name="timeBetweenLogStatsMillis" value="${druid.timeBetweenLogStatsMillis}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${pool.initialSize}" />
		<property name="minIdle" value="${pool.minIdle}" />
		<property name="maxActive" value="${pool.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${pool.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${pool.validationQuery}" />
		<property name="testWhileIdle" value="${pool.testWhileIdle}" />
		<property name="testOnBorrow" value="${pool.testOnBorrow}" />
		<property name="testOnReturn" value="${pool.testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="${druid.filters}" /> -->
	</bean>

</beans>
